// middleware.ts
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { jwtDecode } from "jwt-decode"; // ЁЯСИ ржЖржкржирж╛рж░ utils/jwt ржерзЗржХрзЗржУ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи

export function middleware(req: NextRequest) {
  // ЁЯНк 1) Cookie ржерзЗржХрзЗ token ржирж┐ржи
  const token = req.cookies.get("accessToken")?.value;

  // ЁЯНк 2) Token ржирж╛ ржерж╛ржХрж▓рзЗ тЖТ Login ржП redirect ржХрж░рзБржи
  if (!token) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  try {
    // ЁЯНк 3) Token decode ржХрж░рзБржи
    const decoded: any = jwtDecode(token);

    // ЁЯНк 4) Role-based protection
    if (
      decoded.companyRole === "company Admin" &&
      (decoded.role === "companyAdmin" || decoded.role === "companyEmployee")
    ) {
      return NextResponse.redirect(new URL("/unauthorized", req.url));
    }

    // ЁЯНк 5) рж╕ржм ржарж┐ржХ ржерж╛ржХрж▓рзЗ request ржЪрж╛рж▓рж┐рзЯрзЗ ржжрж┐ржи
    return NextResponse.next();
  } catch (err) {
    // Invalid token рж╣рж▓рзЗ тЖТ Login ржП redirect ржХрж░рзБржи
    return NextResponse.redirect(new URL("/login", req.url));
  }
}

// ржХрзЛржи ржХрзЛржи route ржкрзНрж░рзЛржЯрзЗржХрзНржЯ рж╣ржмрзЗ
export const config = {
  matcher: ["/dashboard/:path*"], // тЬЕ рж╢рзБржзрзБ dashboard protect рж╣ржмрзЗ
};
